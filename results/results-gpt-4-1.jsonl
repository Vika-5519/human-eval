{"task_id": "HumanEval/154", "completion": "\n    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    return False"}
{"task_id": "HumanEval/92", "completion": "\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return (x == y + z) or (y == x + z) or (z == x + y)\n    else:\n        return False"}
{"task_id": "HumanEval/155", "completion": "\n    even_count = 0\n    odd_count = 0\n\n    # Convert the number to its absolute value to handle negative numbers\n    num = abs(num)\n\n    # Iterate through each digit in the number\n    for digit in str(num):\n        # Check if the digit is even or odd and increment the respective count\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # Return the tuple with the even and odd counts\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/1", "completion": "\n    result = []\n    stack = []\n    start = 0\n\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            if not stack:\n                start = i\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                result.append(paren_string[start:i+1])\n\n    return result"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                if char.islower():\n                    encoded_message += chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n                else:\n                    encoded_message += chr(((ord(char) - ord('A') + 2) % 26) + ord('A'))\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n\n    return encoded_message"}
{"task_id": "HumanEval/2", "completion": "\n    decimal_part = number - int(number)\n    return decimal_part"}
{"task_id": "HumanEval/157", "completion": "\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/98", "completion": "\n    uppercase_vowels = \"AEIOU\"\n    count = 0\n\n    for i in range(0, len(s), 2):\n        if s[i] in uppercase_vowels:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/4", "completion": "\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n\n    # Calculate the absolute differences between each number and the mean\n    absolute_differences = [abs(number - mean) for number in numbers]\n\n    # Calculate the mean of the absolute differences\n    mad = sum(absolute_differences) / len(absolute_differences)\n\n    return mad"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    largest_prime = max(filter(is_prime, lst), default=0)\n    return sum_of_digits(largest_prime)"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(n):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/159", "completion": "\n    # Calculate the number of carrots to eat\n    carrots_to_eat = min(need, remaining)\n\n    # Update the total number of eaten carrots and the remaining carrots\n    total_eaten = number + carrots_to_eat\n    remaining -= carrots_to_eat\n\n    # Return the result as an array\n    return [total_eaten, remaining]"}
{"task_id": "HumanEval/6", "completion": "\n    def max_paren_depth(s: str) -> int:\n        depth = 0\n        max_depth = 0\n        for char in s:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        return max_depth\n\n    groups = paren_string.split()\n    return [max_paren_depth(group) for group in groups]"}
{"task_id": "HumanEval/161", "completion": "\n    # Check if the string contains any letters\n    contains_letters = any(c.isalpha() for c in s)\n\n    # If the string contains no letters, reverse the string\n    if not contains_letters:\n        return s[::-1]\n\n    # Otherwise, reverse the case of each letter in the string\n    result = []\n    for c in s:\n        if c.isalpha():\n            result.append(c.lower() if c.isupper() else c.upper())\n        else:\n            result.append(c)\n\n    return ''.join(result)"}
{"task_id": "HumanEval/100", "completion": "\n    pile = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            pile.append(pile[-1] + 2)\n        else:\n            pile.append(pile[-1] + 2)\n    return pile"}
{"task_id": "HumanEval/8", "completion": "\n    total_sum = 0\n    total_product = 1\n\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n\n    return total_sum, total_product"}
{"task_id": "HumanEval/163", "completion": "\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]"}
{"task_id": "HumanEval/102", "completion": "\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    elif y - 1 >= x:\n        return y - 1\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    else:\n        total = sum(range(n, m+1))\n        count = m - n + 1\n        avg = round(total / count)\n        return bin(avg)"}
{"task_id": "HumanEval/104", "completion": "\n    def has_even_digit(num):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                return True\n        return False\n\n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i - 1)\n\n    def sum_of_numbers(i):\n        return sum(range(1, i + 1))\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n\n    return result"}
{"task_id": "HumanEval/108", "completion": "\n    def sum_of_digits(num):\n        if num < 0:\n            num = -num\n            first_digit = -int(str(num)[0])\n            other_digits = [int(digit) for digit in str(num)[1:]]\n            return first_digit + sum(other_digits)\n        else:\n            return sum(int(digit) for digit in str(num))\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/105", "completion": "\n    # Filter the array to only include numbers between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n\n    # Sort the filtered array in descending order\n    sorted_arr = sorted(filtered_arr, reverse=True)\n\n    # Create a dictionary to map numbers to their corresponding names\n    num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n\n    # Replace each number in the sorted array with its corresponding name\n    result = [num_to_name[num] for num in sorted_arr]\n\n    return result"}
{"task_id": "HumanEval/110", "completion": "\n    odd_lst1 = [x for x in lst1 if x % 2 != 0]\n    even_lst2 = [x for x in lst2 if x % 2 == 0]\n\n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/109", "completion": "\n    if not arr:\n        return True\n\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n            index = i\n\n    if count == 0:\n        return True\n    elif count == 1 and arr[-1] <= arr[0]:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/112", "completion": "\n    # Remove characters in c from s\n    result = ''.join([char for char in s if char not in c])\n\n    # Check if the result is a palindrome\n    is_palindrome = result == result[::-1]\n\n    return result, is_palindrome"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for s in lst:\n        odd_count = sum(1 for c in s if int(c) % 2 == 1)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "completion": "\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/111", "completion": "\n    # Split the input string into a list of letters\n    letters = test.split()\n\n    # Create an empty dictionary to store the count of each letter\n    letter_count = {}\n\n    # Iterate through the list of letters\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in letter_count:\n            letter_count[letter] += 1\n        # If the letter is not in the dictionary, add it with a count of 1\n        else:\n            letter_count[letter] = 1\n\n    # Find the maximum count of any letter\n    max_count = 0\n    for count in letter_count.values():\n        if count > max_count:\n            max_count = count\n\n    # Create a new dictionary to store the letters with the maximum count\n    max_count_letters = {}\n\n    # Iterate through the letter_count dictionary\n    for letter, count in letter_count.items():\n        # If the count of the letter is equal to the maximum count, add it to the max_count_letters dictionary\n        if count == max_count:\n            max_count_letters[letter] = count\n\n    # Return the max_count_letters dictionary\n    return max_count_letters"}
{"task_id": "HumanEval/116", "completion": "\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/115", "completion": "\n    total_water = sum([row.count(1) for row in grid])\n    return math.ceil(total_water / capacity)"}
{"task_id": "HumanEval/118", "completion": "\n    vowels = \"AEIOUaeiou\"\n    closest_vowel = \"\"\n\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            closest_vowel = word[i]\n            break\n\n    return closest_vowel"}
{"task_id": "HumanEval/117", "completion": "\n    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        count = 0\n        for char in word:\n            if char in consonants:\n                count += 1\n        return count\n\n    words = s.split()\n    result = []\n\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n\n    return result"}
{"task_id": "HumanEval/119", "completion": "\n    # Initialize counters for open and close parentheses\n    open_count = 0\n    close_count = 0\n\n    # Iterate through the list of strings\n    for s in lst:\n        # Count the open and close parentheses in each string\n        open_count += s.count('(')\n        close_count += s.count(')')\n\n    # Check if the counts are equal, meaning the strings can be concatenated to form a good string\n    if open_count == close_count:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first k elements of the sorted array\n    return arr[:k]"}
{"task_id": "HumanEval/122", "completion": "\n    result = 0\n    for i in range(k):\n        if 0 <= arr[i] <= 99:\n            result += arr[i]\n    return result"}
{"task_id": "HumanEval/121", "completion": "\n    odd_sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            odd_sum += lst[i]\n    return odd_sum"}
{"task_id": "HumanEval/61", "completion": "\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"task_id": "HumanEval/31", "completion": "\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/63", "completion": "\n    def fibfib_helper(n, memo):\n        if n in memo:\n            return memo[n]\n        if n == 0 or n == 1:\n            memo[n] = 0\n        elif n == 2:\n            memo[n] = 1\n        else:\n            memo[n] = fibfib_helper(n-1, memo) + fibfib_helper(n-2, memo) + fibfib_helper(n-3, memo)\n        return memo[n]\n\n    return fibfib_helper(n, {})"}
{"task_id": "HumanEval/33", "completion": "\n    # Extract the values at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(0, len(l), 3)]\n\n    # Sort the extracted values\n    divisible_by_three.sort()\n\n    # Replace the values at indices divisible by 3 with the sorted values\n    for i, value in enumerate(divisible_by_three):\n        l[i * 3] = value\n\n    return l"}
{"task_id": "HumanEval/65", "completion": "\n    x_str = str(x)\n    num_digits = len(x_str)\n    if shift > num_digits:\n        return x_str[::-1]\n    else:\n        shift %= num_digits\n        return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/126", "completion": "\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst.count(lst[i]) > 1:\n            return False\n    return True"}
{"task_id": "HumanEval/35", "completion": "\n    max_val = l[0]\n    for element in l:\n        if element > max_val:\n            max_val = element\n    return max_val"}
{"task_id": "HumanEval/124", "completion": "\n    import re\n\n    # Check if the date string is empty\n    if not date:\n        return False\n\n    # Check if the date string is in the correct format\n    pattern = re.compile(r'^\\d{2}-\\d{2}-\\d{4}$')\n    if not pattern.match(date):\n        return False\n\n    # Split the date string into month, day, and year\n    month, day, year = map(int, date.split('-'))\n\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:  # month == 2\n        if day < 1 or day > 29:\n            return False\n\n    return True"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n\n    sum_magnitudes = 0\n    product_signs = 1\n\n    for num in arr:\n        if num == 0:\n            return 0\n        sum_magnitudes += abs(num)\n        product_signs *= (1 if num > 0 else -1)\n\n    return sum_magnitudes * product_signs"}
{"task_id": "HumanEval/0", "completion": "\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/131", "completion": "\n    product = 1\n    has_odd_digit = False\n\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd_digit = True\n\n    return product if has_odd_digit else 0"}
{"task_id": "HumanEval/67", "completion": "\n    import re\n\n    # Extract the number of apples and oranges from the string\n    apples, oranges = map(int, re.findall(r'\\d+', s))\n\n    # Calculate the number of mango fruits in the basket\n    mangoes = n - apples - oranges\n\n    return mangoes"}
{"task_id": "HumanEval/70", "completion": "\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    return result"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/68", "completion": "\n    smallest_even = None\n    smallest_index = None\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_index = index\n\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []"}
{"task_id": "HumanEval/42", "completion": "\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/133", "completion": "\n    import math\n\n    # Round each element in the list to the upper int (Ceiling)\n    rounded_lst = [math.ceil(num) for num in lst]\n\n    # Calculate the sum of squared numbers in the rounded list\n    sum_of_squares = sum([num ** 2 for num in rounded_lst])\n\n    return sum_of_squares"}
{"task_id": "HumanEval/40", "completion": "\n    n = len(l)\n    if n < 3:\n        return False\n\n    l.sort()\n\n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = i + 1, n - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return False"}
{"task_id": "HumanEval/135", "completion": "\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i\n    return largest_index"}
{"task_id": "HumanEval/72", "completion": "\n    # Check if the list is a palindrome\n    is_balanced = q == q[::-1]\n\n    # Calculate the sum of the elements in the list\n    total_weight = sum(q)\n\n    # Return True if the list is balanced and the total weight is less than or equal to the maximum weight\n    return is_balanced and total_weight <= w"}
{"task_id": "HumanEval/44", "completion": "\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"task_id": "HumanEval/137", "completion": "\n    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(\",\", \".\")\n            return float(value)\n        return value\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n\n    if a_float == b_float:\n        return None\n    elif a_float > b_float:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/74", "completion": "\n    # Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    # Compare the total number of characters and return the list with less characters\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/139", "completion": "\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n\n    return result"}
{"task_id": "HumanEval/76", "completion": "\n    if n == 1:\n        return x == 1\n    power = 0\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power += 1\n    return False"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib = [0, 0, 2, 0]\n        for i in range(4, n + 1):\n            fib.append(fib[-1] + fib[-2] + fib[-3] + fib[-4])\n        return fib[-1]"}
{"task_id": "HumanEval/48", "completion": "\n    # Remove any non-alphanumeric characters and convert to lowercase\n    cleaned_text = ''.join(char.lower() for char in text if char.isalnum())\n\n    # Check if the cleaned text is equal to its reverse\n    return cleaned_text == cleaned_text[::-1]"}
{"task_id": "HumanEval/80", "completion": "\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/78", "completion": "\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/52", "completion": "\n    return all(x < t for x in l)"}
